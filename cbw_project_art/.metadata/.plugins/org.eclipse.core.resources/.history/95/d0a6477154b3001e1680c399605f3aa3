package com.cbw.art.service.impl;

import java.time.LocalDateTime;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cbw.art.dto.BaseResponse;
import com.cbw.art.dto.CommentDto;
import com.cbw.art.dto.QuestionDto;
import com.cbw.art.enumstatus.ResultCode;
import com.cbw.art.exception.InvalidRequestException;
import com.cbw.art.model.Comment;
import com.cbw.art.model.Question;
import com.cbw.art.model.User;
import com.cbw.art.repository.CommentRepository;
import com.cbw.art.repository.QuestionRepository;
import com.cbw.art.repository.UserRepository;
import com.cbw.art.service.CommentService;
import com.cbw.art.service.QuestionService;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class QuestionServiceImpl implements QuestionService{
	
	private final QuestionRepository questionRepository;
	private final UserRepository userRepository;
	private final CommentService commentService;
	private final CommentRepository commentRepository;
	@Autowired
	public QuestionServiceImpl(QuestionRepository questionRepository, UserRepository userRepository,
			CommentService commentService,CommentRepository commentRepository) {
		super();
		this.questionRepository = questionRepository;
		this.userRepository = userRepository;
		this.commentService = commentService;
		this.commentRepository = commentRepository;
	}
	
	//게시글 생성
	public BaseResponse<Void> createComment(long questionId, CommentDto commentDto) {
	    if (commentDto.getWriter() == null || commentDto.getWriter().isEmpty()) {
	        throw new InvalidRequestException("Invalid Writer", "댓글 작성자가 없습니다.");
	    }

	    Question question = questionRepository.findById(questionId)
	            .orElseThrow(() -> new InvalidRequestException("Invalid Question", "존재하지 않는 질문입니다."));

	    Comment comment = new Comment();
	    comment.setWriter(commentDto.getWriter());
	    comment.setText(commentDto.getText());
	    comment.setCreateAt(LocalDateTime.now());
	    comment.setQuestion(question);

	    commentRepository.save(comment);

	    return new BaseResponse<>(
	            ResultCode.SUCCESS.name(),
	            null,
	            "댓글이 작성되었습니다."
	    );
	}

	
	//게시글목록 가져오기
	public BaseResponse<List<Question>> getAllQuest() {
		List<Question> questions = questionRepository.findAll();
		if(questions.isEmpty()) {
			throw new InvalidRequestException("noti empty", "존재하지 않는 질문사항입니다.");
		}
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				questions,
				ResultCode.SUCCESS.getMsg());
	}
	//게시글 삭제
	public BaseResponse<Long> deleteQuest(Long id) {
		
		Optional<Question> question = questionRepository.findById(id);
		if(question.isEmpty()) {
			throw new InvalidRequestException(Long.toString(id), "해당 질문사항은 존재하지 않습니다.");
		}
		
		questionRepository.deleteById(id);
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				id,
				"질문사항이 삭제되었습니다.");
	}
	//게시글 하나만 가져옴.
	@Override
	public Question getQuestById(long id) {
	    return questionRepository.findById(id)
	            .orElseThrow(() -> new InvalidRequestException(String.valueOf(id), "해당 ID의 질문이 존재하지 않습니다."));
	}
	@Override
	public CommentDto addCommentToQuestion(long questionId, CommentDto commentDto) {
		CommentDto createdCommentDto = commentService.createComment(questionId,commentDto);
		return createdCommentDto;
	}
	@Override
	public List<CommentDto> getCommentsByQuestionId(long questionId) {
		commentRe
		return null;
	}
	
	
}
