package com.cbw.art.service.impl;

import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cbw.art.dto.BaseResponse;
import com.cbw.art.dto.CategoryDto;
import com.cbw.art.dto.LectureDto;
import com.cbw.art.enumstatus.AuthorityType;
import com.cbw.art.enumstatus.CategoryType;
import com.cbw.art.enumstatus.ResultCode;
import com.cbw.art.exception.InvalidRequestException;
import com.cbw.art.model.Category;
import com.cbw.art.model.Lecture;
import com.cbw.art.model.User;
import com.cbw.art.repository.CategoryRepository;
import com.cbw.art.repository.LectureRepository;
import com.cbw.art.repository.ReviewRepository;
import com.cbw.art.repository.UserRepository;
import com.cbw.art.service.LectureService;

@Service
@Transactional
public class LectureServiceImpl implements LectureService{
	
	private final LectureRepository lectureRepository;
	private final ReviewRepository reviewRepository;
	private final CategoryRepository categoryRepository;
	private final UserRepository userRepository;
	
	@Autowired
	public LectureServiceImpl(LectureRepository lectureRepository, ReviewRepository reviewRepository,
			CategoryRepository categoryRepository, UserRepository userRepository) {
		super();
		this.lectureRepository = lectureRepository;
		this.reviewRepository = reviewRepository;
		this.categoryRepository = categoryRepository;
		this.userRepository = userRepository;
	}
	
	//강의 생성
	@Override
	public BaseResponse<Void> createLecture(LectureDto lectureDto) {
		
		
		// 선생님 정보 가져오기
		User teacher = userRepository.findByLoginId(lectureDto.getTeacherId())
		        .filter(user -> user.getAuthorities().stream()
		                .anyMatch(auth -> auth.getAuthorityType().equals(AuthorityType.ROLE_TEACHER)))
		        .orElseThrow(() -> new InvalidRequestException("Teacher not found", "선생님이 존재하지 않거나 선생님 역할을 가지고 있지 않습니다."));
		//카테고리 가져오기
		Category category = categoryRepository.findByCategoryType(CategoryType.WEBTOON)
				.orElseThrow(() -> new InvalidRequestException("Default category not found", "전체항목에 없음"));
		//강의 생성
		Lecture lecture = new Lecture();
		lecture.setTitle(lectureDto.getTitle());
		lecture.setTeacher(teacher);
		lecture.setPrice(lectureDto.getPrice());
		lecture.setImage(lectureDto.getImage());
		lecture.setCategorys(Collections.singleton(category));
			
		lectureRepository.save(lecture);
			
		return new BaseResponse<>(
		           ResultCode.SUCCESS.name(),
		           null,
		           "강의생성 완료!");
		}

	//강의 목록
	@Override
	public BaseResponse<List<Lecture>> getAllLecture() {
		List<Lecture> lectures = lectureRepository.findAll();
		if(lectures.isEmpty()) {
			throw new InvalidRequestException("lecture empty", "존재하지 않는 강의 입니다.");
		}
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				lectures,
				ResultCode.SUCCESS.getMsg());
	}
	
	//강의 삭제
	@Override
	public BaseResponse<Long> deleteLecture(Long id) {
		Optional<Lecture> lecture = lectureRepository.findById(id);
		if(lecture.isEmpty()) {
			throw new InvalidRequestException(Long.toString(id), "해당 강의는 존재하지 않습니다.");
		}
		
		lectureRepository.deleteById(id);
		reviewRepository.deleteById(id);
		
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				id,
				"강의와 리뷰가 삭제되었습니다.");
	}
	
	//강의 하나의 정보를 불러옴
	@Override
	public Lecture getLectureById(long id) {
		return lectureRepository.findById(id)
				.orElseThrow(() -> new InvalidRequestException(String.valueOf(id), "해당 ID의 강의는 존재하지 않습니다."));
	}
	
	//카테고리 추가
	@Override
	public BaseResponse<Void> addCategory(CategoryDto categoryDto) {
		//강의 ID로 강의를 찾음
		Lecture lecture = lectureRepository.findById(categoryDto.getLectureId())
				.orElseThrow(() -> new InvalidRequestException("Invalid Lecture", "존재하지 않는 강의입니다."));
		// 새로운 카테고리 생성
		Category newCategory = new Category();
		newCategory.setCategoryType(CategoryType.valueOf(categoryDto.getCategoryType()));

		// 기존의 카테고리 리스트에 새로운 카테고리 추가
		Set<Category> newCategories = new HashSet<>();
		newCategories.add(newCategory);

		// 강의에 업데이트된 카테고리 리스트를 설정
		lecture.setCategorys(newCategories);

		// 강의 저장
		lectureRepository.save(lecture);
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				null,
				"카테고리 추가완료!");
	}

	@Override
	public BaseResponse<List<Lecture>> getLecturesByTeacherId(long teacher) {
		List<Lecture> teacherId = lectureRepository.findByTeacherId(teacher);
		if(teacherId.isEmpty()) {
			throw new InvalidRequestException("Not Found","선생님의 아이디가 존재하지 않습니다.");
		}
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				teacherId,
				ResultCode.SUCCESS.getMsg());
	}


}
