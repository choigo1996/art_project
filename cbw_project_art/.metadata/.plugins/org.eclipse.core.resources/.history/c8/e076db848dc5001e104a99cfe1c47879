package com.cbw.art.service.impl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;

import com.cbw.art.dto.BaseResponse;
import com.cbw.art.dto.LectureListDto;
import com.cbw.art.enumstatus.AuthorityType;
import com.cbw.art.enumstatus.ResultCode;
import com.cbw.art.exception.InvalidRequestException;
import com.cbw.art.model.Lecture;
import com.cbw.art.model.LectureList;
import com.cbw.art.model.User;
import com.cbw.art.repository.LectureListRepository;
import com.cbw.art.repository.LectureRepository;
import com.cbw.art.repository.UserRepository;
import com.cbw.art.service.LectureListService;

@Service
public class LectureListServiceImpl implements LectureListService{
	
	private final LectureListRepository lectureListRepository;
	private final LectureRepository lectureRepository;
	private final UserRepository userRepository;
	
	@Autowired
	public LectureListServiceImpl(LectureListRepository lectureListRepository, LectureRepository lectureRepository,
			UserRepository userRepository) {
		super();
		this.lectureListRepository = lectureListRepository;
		this.lectureRepository = lectureRepository;
		this.userRepository = userRepository;
	}

	@Override
	public BaseResponse<Void> createLeList(Authentication authentication,LectureListDto lectureListDto) {
		//사용자 정보가 null이거나 인증되지 않은 경우 예외처리
		if(authentication == null || !authentication.isAuthenticated()) {
			throw new InvalidRequestException("Invalid Authentication", "인증되지 않은 사용자입니다.");
		}
		//사용자 정보 가져오기
		String loginId = authentication.getName();
		Optional<User> user = userRepository.findByLoginId(loginId);
		if(!user.isPresent()) {
			throw new InvalidRequestException("Invalid Writer", "글쓰기 권한이 없음.");
		}
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				null,
				"강의 목록이 추가되었습니다.");
	}

	@Override
	public BaseResponse<List<LectureList>> getAllLeList() {
		List<LectureList> lectureLists = lectureListRepository.findAll();
		if(lectureLists.isEmpty()) {
				throw new InvalidRequestException("Not Found", "등록된 강의가 없음");
		}
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				lectureLists,
				ResultCode.SUCCESS.getMsg());
	}

	@Override
	public BaseResponse<Long> deleteLeList(Long id) {
		LectureList lectureList = lectureListRepository.findById(id)
				.orElseThrow(() ->new InvalidRequestException("Invalid Lelist", "존재하지 않는 강의"));
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				id,
				"강의목록의 강의가 삭제되었습니다.");
	}

	
		
}
