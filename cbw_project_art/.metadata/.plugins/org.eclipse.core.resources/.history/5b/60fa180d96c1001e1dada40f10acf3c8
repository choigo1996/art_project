package com.cbw.art.service.impl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;

import com.cbw.art.dto.BaseResponse;
import com.cbw.art.dto.PurchseDto;
import com.cbw.art.enumstatus.ResultCode;
import com.cbw.art.exception.InvalidRequestException;
import com.cbw.art.model.Lecture;
import com.cbw.art.model.Purchase;
import com.cbw.art.model.User;
import com.cbw.art.repository.LectureRepository;
import com.cbw.art.repository.PurchaseRepository;
import com.cbw.art.repository.UserRepository;
import com.cbw.art.service.PurchaseService;

@Service
public class PurchaseServiceImpl implements PurchaseService{
	private final PurchaseRepository purchaseRepository;
	private final UserRepository userRepository;
	private final LectureRepository lectureRepository;
	
	@Autowired
	public PurchaseServiceImpl(PurchaseRepository purchaseRepository, UserRepository userRepository,
			LectureRepository lectureRepository) {
		super();
		this.purchaseRepository = purchaseRepository;
		this.userRepository = userRepository;
		this.lectureRepository = lectureRepository;
	}

	@Override
	public BaseResponse<Void> savePurchase(Authentication authentication, PurchseDto purchseDto) {
		//사용자 정보가 null이거나 인증되지 않은 경우 예외처리
		if(authentication == null || !authentication.isAuthenticated()) {
			throw new InvalidRequestException("Invalid Authentication", "인증되지 않은 사용자입니다.");
		}
		//사용자 정보 가져오기 
		String loginId = authentication.getName();
		Optional<User> user = userRepository.findOneWithAuthoritiesByLoginId(loginId);
		if(!user.isPresent()) {
			throw new InvalidRequestException("Invalid login", "구매할 자격이없다");
		}
		//강의 정보 가져오기
		Optional<Lecture> lecture = lectureRepository.findById(purchseDto.getLectureId());
		if(lecture == null) {
			throw new InvalidRequestException("Invalid lecture", "존재하지 않는 강의입니다.");
		}
		Purchase purchase = new Purchase();
		purchase.setLecture(lecture.get());
		purchase.setUser(user.get());
		purchaseRepository.save(purchase);
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				null,
				"구매 되었습니다.");
	}

	@Override
	public BaseResponse<List<Purchase>> getAllPurchase() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Purchase getPurchaseById(long id) {
		// TODO Auto-generated method stub
		return null;
	}




	
}
