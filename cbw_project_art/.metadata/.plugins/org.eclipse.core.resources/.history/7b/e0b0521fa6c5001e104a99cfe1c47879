package com.cbw.art.service.impl;


import java.util.Collections;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cbw.art.dto.AuthorityDto;
import com.cbw.art.dto.BaseResponse;
import com.cbw.art.dto.UserDto;
import com.cbw.art.enumstatus.AuthorityType;
import com.cbw.art.enumstatus.ResultCode;
import com.cbw.art.exception.InvalidRequestException;
import com.cbw.art.model.Authority;
import com.cbw.art.model.User;
import com.cbw.art.repository.AuthorityRepository;
import com.cbw.art.repository.UserRepository;
import com.cbw.art.securityUtil.SecurityUtil;
import com.cbw.art.service.UserService;


@Service
public class UserServiceImpl implements UserService{
	private final UserRepository userRepository;
	private final PasswordEncoder passwordEncoder;
	private final AuthorityRepository authorityRepository;
	
	@Autowired
	public UserServiceImpl(UserRepository userRepository, PasswordEncoder passwordEncoder,
			AuthorityRepository authorityRepository) {
		super();
		this.userRepository = userRepository;
		this.passwordEncoder = passwordEncoder;
		this.authorityRepository = authorityRepository;
	}
	
	//회원가입
	@Transactional
	public UserDto signUp(UserDto userDto) {
		if(userRepository.findOneWithAuthoritiesByLoginId(userDto.getLoginId())
				.orElse(null) != null) {
			throw new InvalidRequestException("Duplicated member","중복되는 아이디입니다.");
		}
		else if(userRepository.findOneWithAuthoritiesByEmail(userDto.getEmail())
				.orElse(null) != null) {
			throw new InvalidRequestException("Duplicated member","중복되는 이메일 입니다.");
		}
		
		Authority userAuthority = authorityRepository.findByAuthorityType(AuthorityType.ROLE_USER)
				.orElseThrow(() -> new InvalidRequestException("Default authority not found", "기본 권한을 찾을 수 없습니다."));		
		//새로운 사용자에게 기본 권한 부여
		User user = new User();
		user.setLoginId(userDto.getLoginId());
		user.setPassword(passwordEncoder.encode(userDto.getPassword()));
		user.setName(userDto.getName());
		user.setBirthDate(userDto.getBirthDate());
		user.setEmail(userDto.getEmail());
	    user.setAuthorities(Collections.singleton(userAuthority));
		user.setActivated(true);
		return UserDto.from(userRepository.save(user));
	}
	//자신의 정보를 볼 수 있는 것
	@Transactional(readOnly = true)
	public UserDto getUserWithAuthorities(String loginId) {
		return UserDto.from(userRepository.findOneWithAuthoritiesByLoginId(loginId)
				.orElseThrow(() -> new InvalidRequestException(loginId,"member not found")));
	}
	//다른 사람의 정보를 볼 수 있음(관리자)
	@Transactional(readOnly = true)
	public UserDto getCurrentUserWithAuthorities() {
		return UserDto.from(
				SecurityUtil.getCurrentUsername()
				.flatMap(userRepository::findOneWithAuthoritiesByLoginId)
				.orElseThrow(() -> new InvalidRequestException("No current user","Current member not found")));
	}
	//중복체크 
	@Override
	public boolean isUserIdDuplicate(String loginId) {
		return userRepository.existsByLoginId(loginId);
	}
	@Override
	public boolean isEmailTaken(String email) {
		return userRepository.existsByEmail(email);
	}
	//권한부여
	@Override
	public BaseResponse<Void> updataAuthority(AuthorityDto authorityDto) {
		//유저 ID로 유저를 찾음
		Optional<User> optionalUser = userRepository.findByLoginId(authorityDto.getUserId());
		if(optionalUser.isEmpty()) {
			throw new InvalidRequestException("Invalid User","존재하지않는 유저입니다.");
		}
		//새로운 권한을 생성
		Authority newAuthority = new Authority();
		newAuthority.setAuthorityType(AuthorityType.valueOf(authorityDto.getAuthorityName()));
		
		//기존의 권한에 다른 권한을 추가
		User user = optionalUser.get();
		Set<Authority> newAuthorities = new HashSet<>();
		newAuthorities.add(newAuthority);
		
		//유저 권한을 업데이트
	    user.setAuthorities(newAuthorities);
		userRepository.save(user);
		
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				null,
				"권한이 업데이트 되었습니다.");
	}

	@Override
	public BaseResponse<String> deleteUser(Authentication authentication, String password) {
		//사용자 정보가 null이거나 인증되지 않은 경우 예외처리
		if(authentication == null || !authentication.isAuthenticated()) {
			throw new InvalidRequestException("Invalid Authentication", "인증되지 않은 사용자입니다.");
		}
		//사용자 정보 가져오기
		String loginId = authentication.getName();
		Optional<User> user = userRepository.findOneWithAuthoritiesByLoginId(loginId);
		if(user.isPresent()) {
			throw new InvalidRequestException("Invalid Writer", "글쓰기 권한이 없습니다.");
		}
		// 비밀번호 확인
		User user2 = user.get();
		boolean isPassword = passwordEncoder.matches(password, user2.getPassword());
		if(!isPassword) {
			throw new InvalidRequestException("Invalid password", "비밀번호가 일치하지 않습니다.");
		}
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				null,
				"탈퇴가 성공적으로 처리되었습니다.");
	}



}
