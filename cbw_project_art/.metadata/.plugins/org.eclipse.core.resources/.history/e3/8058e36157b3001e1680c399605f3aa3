import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cbw.art.repository.QuestionRepository;
import com.cbw.art.repository.UserRepository;
import com.cbw.art.service.CommentService;
import com.cbw.art.service.QuestionService;

@Service
@Transactional
public class QuestionServiceImpl implements QuestionService {

    private final QuestionRepository questionRepository;
    private final UserRepository userRepository;
    private final CommentService commentService;

    @Autowired
    public QuestionServiceImpl(QuestionRepository questionRepository, UserRepository userRepository,
            CommentService commentService) {
        this.questionRepository = questionRepository;
        this.userRepository = userRepository;
        this.commentService = commentService;
    }

    @Override
    public BaseResponse<Void> createQuestion(QuestionDto questionDto) {
        Optional<User> user = userRepository.findOneWithAuthoritiesByLoginId(questionDto.getWriter());
        if (!user.isPresent()) {
            throw new InvalidRequestException("Invalid Writer", "글쓰기 권한이 없습니다");
        }

        Question question = new Question();
        question.setCreateAt(LocalDateTime.now());
        question.setTitle(questionDto.getTitle());
        question.setText(questionDto.getText());
        question.setWriter(questionDto.getWriter());

        questionRepository.save(question);

        return new BaseResponse<>(ResultCode.SUCCESS.name(), null, "질문 생성 완료되었습니다");
    }

    @Override
    public BaseResponse<List<Question>> getAllQuestions() {
        List<Question> questions = questionRepository.findAll();
        if (questions.isEmpty()) {
            throw new InvalidRequestException("noti empty", "존재하지 않는 질문사항입니다.");
        }
        return new BaseResponse<>(ResultCode.SUCCESS.name(), questions, ResultCode.SUCCESS.getMsg());
    }

    @Override
    public BaseResponse<Long> deleteQuestion(Long id) {
        Optional<Question> question = questionRepository.findById(id);
        if (question.isEmpty()) {
            throw new InvalidRequestException(Long.toString(id), "해당 질문사항은 존재하지 않습니다.");
        }

        questionRepository.deleteById(id);
        return new BaseResponse<>(ResultCode.SUCCESS.name(), id, "질문사항이 삭제되었습니다.");
    }

    @Override
    public Question getQuestionById(long id) {
        return questionRepository.findById(id)
                .orElseThrow(() -> new InvalidRequestException(String.valueOf(id), "해당 ID의 질문이 존재하지 않습니다."));
    }

    @Override
    public CommentDto addCommentToQuestion(long questionId, CommentDto commentDto) {
        return commentService.createComment(questionId, commentDto);
    }

    @Override
    public List<CommentDto> getCommentsByQuestionId(long questionId) {
        return commentService.getCommentsByQuestionId(questionId);
    }
}
