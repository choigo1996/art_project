package com.cbw.art.service.impl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cbw.art.dto.BaseResponse;
import com.cbw.art.dto.PurchaseDto;
import com.cbw.art.enumstatus.ResultCode;
import com.cbw.art.exception.InvalidRequestException;
import com.cbw.art.model.Lecture;
import com.cbw.art.model.Purchase;
import com.cbw.art.model.User;
import com.cbw.art.repository.LectureRepository;
import com.cbw.art.repository.PurchaseRepository;
import com.cbw.art.repository.UserRepository;
import com.cbw.art.service.PurchaseService;

@Service
public class PurchaseServiceImpl implements PurchaseService{
	private final PurchaseRepository purchaseRepository;
	private final UserRepository userRepository;
	private final LectureRepository lectureRepository;
	
	@Autowired
	public PurchaseServiceImpl(PurchaseRepository purchaseRepository, UserRepository userRepository,
			LectureRepository lectureRepository) {
		super();
		this.purchaseRepository = purchaseRepository;
		this.userRepository = userRepository;
		this.lectureRepository = lectureRepository;
	}
	
	//카트에 담긴 것을 구매
	@Override
	public BaseResponse<Void> savePurchase(Authentication authentication, PurchaseDto purchaseDto) {
		//사용자 정보가 null이거나 인증되지 않은 경우 예외처리
		if(authentication == null || !authentication.isAuthenticated()) {
			throw new InvalidRequestException("Invalid Authentication", "인증되지 않은 사용자입니다.");
		}
		//사용자 정보 가져오기 
		String loginId = authentication.getName();
		Optional<User> user = userRepository.findOneWithAuthoritiesByLoginId(loginId);
		if(!user.isPresent()) {
			throw new InvalidRequestException("Invalid login", "구매할 자격이없다");
		}
		//강의 정보 가져오기
		Optional<Lecture> lecture = lectureRepository.findById(purchaseDto.getLectureId());
		if(lecture == null) {
			throw new InvalidRequestException("Invalid lecture", "존재하지 않는 강의입니다.");
		}
		//중복된 강의 구매를 금지
		if(purchaseRepository.existsByUserAndLectureId(purchaseDto.getUserId(), purchaseDto.getLectureId())) {
			throw new InvalidRequestException("Duplicate Lecture", "이미 해당 강의를 구매했습니다.");
		}
		Purchase purchase = new Purchase();
		purchase.setLecture(lecture.get());
		purchase.setUser(user.get());
		purchaseRepository.save(purchase);
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				null,
				"구매 되었습니다.");
	}
	//모든 회원의 구매정보 불러오기
	@Override
	public BaseResponse<List<Purchase>> getAllPurchase() {
		List<Purchase> purchases = purchaseRepository.findAll();
		if(purchases.isEmpty()) {
			throw new InvalidRequestException("Not Found", "구매한 사람이 없음");
		}
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				purchases,
				ResultCode.SUCCESS.getMsg());
	}
	//특정 강의 ID에 해당하는 모든 사용자의 정보 조회
	@Override
	public BaseResponse<List<Purchase>> getPurchaseByLectureId(long lectureId) {
		List<Purchase> lecture = purchaseRepository.findByLectureId(lectureId);
		if(lecture.isEmpty()) {
			throw new InvalidRequestException("Not Found", "강의의 아이디가 존재하지않음");
		}
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				lecture,
				ResultCode.SUCCESS.getMsg());
	}
	//특정 사용자가 구매한 모든 강의의 정보 조회
	@Override
	public BaseResponse<List<Purchase>> getPurchaseByUserId(long userId) {
		List<Purchase> user = purchaseRepository.findByUserId(userId);
		if(user.isEmpty()) {
			throw new InvalidRequestException("Not Found", "유저의 아이디가 존재하지 않습니다.");
		}
		return new BaseResponse<>(
				ResultCode.SUCCESS.name(),
				user,
				ResultCode.SUCCESS.getMsg());
	}

	
}
